* Mad Libs

* Overview and general instructions

For this project you are going to create a mad-libs style story
generator.

** Logistics
- your program should be named madlibs.py and it should be stored in
  a directory named project-01-madlibs in your repo.
- You may work solo or with a single partner of your choice. If you
- If you work with a partner you must
  - make sure that both partners have the same file in their own
    repositories.
  - There are comments at the top of the program indicating who
    participated.
  - You must complete a larger project by completing two or more
    extras.

    
* Assignment specific instructions:


Create a program name *madlibs.py*. 

Your program will take a string with substitutions in it. For example,
your starting sentence might be:

#+BEGIN_EXAMPLE
Sam <VERB> the <NOUN> and then <VERB> the <NOUN> later.
#+END_EXAMPLE

Your program should also have lists of parts of speech like:

#+BEGIN_SRC 
VERBS=['ate','walked','slept']
NOUNS=['dog','hammer','cat','car','frog']
#+END_SRC

When you see a word in angle brackets, replace it with a random word
of that type. So, for instance, the above sample sentence might be
transformed into:

#+BEGIN_EXAMPLE
Sam ate the hammer and then waled the frog later.
#+END_EXAMPLE

If you run the program again, you could get other substitutions.


** Assignment notes:

For this assignment, you are to decide what functions to write, what
to name them and how to structure your program.

You should also decide on what parts of speech you will use for
substitutions.


** Basic program requirements

When run, it should print out at least two original sentences each
followed by two different madlab outputs for each.

These sentences can be declared as multiline (triple quote) strings in
your program.



** Extras

If you work with a partner you must implement at least two extras. You
can also suggest extras by proposing them on zulip

- Instead of specifying the sentences or story to convert, write a
  story in a file and read it from your program.

- Add some replacements that are unique, that is, the first time you
  see them you select on randomly but then you keep reusing that
  replacement.
  
  For example, take this sentence:
 
  #+BEGIN_EXAMPLE
<HERO> <VERB> in the <NOUN> and then <HERO> <VERB> <NOUN> later.
#+END_EXAMPLE

   In this case, each <VERB> and <NOUN> would be replaced by a random
   selection from the word lists but <HERO> would randomly choose a hero
   once and then use that name for all instances of <HERO>

- Pay attention to letter case. That is, if you replace a word at the
  beginning of a sentence, it should be capitalized, otherwise,
  lowercase. This is except in the case of proper nouns which should
  always be capitalized. 


  
