* Talk like a Pirate

* Due TBD

* Overview and general instructions

A program that takes in data from a file named *input.txt*. This file
will consist of multiple lines of text. Your program will convert the
text to pirate-speak and print out the result.



** Logistics
- your program should be named speak.py and it should be stored in
  a directory named project-02-speak in your repo.
- You may work solo or with a single partner of your choice. If you
- If you work with a partner you must
  - make sure that both partners have the same file in their own
    repositories.
  - There are comments at the top of the program indicating who
    participated.
  - You must complete a larger project by completing two or more
    extras.

    
* Assignment specific instructions:


Create a program name speak.py. This program will read it's input from
a file named *input.txt* and will convert it to piratespeak and print
out the result.

For example. If the input file contained:

#+begin_quote
Hi, buddy! This translator is for translating Proper English to Pirate
Speak and vice versa, and talking like a pirate as pirates do. Type
any sort of word semi-related to pirates and it will be translated as
close as possible.
#+end_quote

The programs output might be something like this:

#+begin_quote
Ahoy, matey! This 'ere translatin' device be fer translatin' proper
English to Pirate Speak an' the reverse, an' blabberin' on like a
pirate as we pirates do. Write any sort o' word half-related to
gentlemen o' fortune an' it be translated near spot on.
#+end_quote

Your program should do this by having a dictionary of translations,
for example, in the text above "Hi" was replaced woth "Ahoy" and
"buddy" with "matey." When you read your input file, you should
replace words that appear in your translation dictionary with their
translations.



** Assignment notes:

For this assignment, you are to decide what functions to write, what
to name them and how to structure your program.


** Basic program requirements (B grade for working alone)

Your program will take an text file named *input.txt* and read it in
and use the dictionary (described below) to translate the contents of
input.txt to pirate-speak. Your program should print out the results.


Your program should contain a dictionary of substitutions to convert
the input file into pirate-speak. 

This web site: https://github.com/hyperrealm/talkfilters contains the
source code for a set of C programs that will convert text into any
number of "languages." While you won't be able to use any of the
actual code, you can lok at the .l files to get an idea on what to put
in your dictionary. For example if you look through the file
*pirate.l* you'll find a section of code that looks like this:

#+begin_src 
Pp]eople                gtf_puts_case("landlubbers");
[Gg]uys/{NW}		 gtf_puts_case("scurvey dogs");
([Bb]efore|[Ee]arlier)/{NW} gtf_puts_case("afore");
[Oo]ld/{NW}              gtf_puts_case("auld");
[Tt]he/{NW}              gtf_puts_case("th'");
#+end_src

for the basic program you don't have to worry about punctuation, upper
or lower case etc. so the above fragment would indicate these
substitutions:

| Original word | Replaced with |
|---------------+---------------|
| people        | landlubbers   |
| guys          | scurvey dogs  |
| before        | afore         |
| earlier       | afore         |
| the           | th'           |

You can also make up your own substitutions or search for other
substitutions online.

For the basic program, you can hard code your dictionary and you can
ignore upper and lower case as well as punctuation.

** Extras

If you work with a partner you must implement at least two extras for
the base grade. You can also suggest extras by proposing them on
zulip.

- Store your translations in a file named *pirate.dat* the file should
  have lines in the form "word:translation." For example:
  #+begin_src 
hi:ahoy
buddy:matey
earlier:afore
guys:scurvey dogs
  #+end_src

  Your program should build it's translation dictionary by reading and
  parsing this file.
- Handle upper and lower case and/or punctuation
- Have an option to translate different languages. The web site linked
  about has many translators specified including fudd, chef, and
  others.
- Try to tackle more advanced translations like converting parts of
  words rather than straight substitutions or inserting pirate phrases
  at appropriate points in your document. For example adding a
  sentence like "Shiver me timbers" or "Walk the plank" between
  sentences specified in input.txt

Feel free to suggest other extras on zulip



  
